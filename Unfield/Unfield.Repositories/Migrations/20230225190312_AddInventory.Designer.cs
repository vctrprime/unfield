// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unfield.Repositories.Infrastructure.Contexts;

#nullable disable

namespace Unfield.Repositories.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20230225190312_AddInventory")]
    partial class AddInventory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Legal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HeadName")
                        .HasColumnType("text")
                        .HasColumnName("head_name");

                    b.Property<string>("Inn")
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.ToTable("legal", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_group_id");

                    b.Property<int>("Sort")
                        .HasColumnType("integer")
                        .HasColumnName("sort");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("permission", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Sort")
                        .HasColumnType("integer")
                        .HasColumnName("sort");

                    b.HasKey("Id");

                    b.ToTable("permission_group", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("role", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("role_permission", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.RoleStadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("role_stadium", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LegalId");

                    b.ToTable("stadium", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("user", "accounts");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("city", "geo");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("country", "geo");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("region", "geo");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("CoveringType")
                        .HasColumnType("smallint")
                        .HasColumnName("covering_type");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_field_id");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("ParentFieldId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("field", "offers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("inventory", "offers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.LockerRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("locker_room", "offers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.OffersImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int?>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_value");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("image", "offers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.OffersSportKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int?>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<byte>("SportKind")
                        .HasColumnType("smallint")
                        .HasColumnName("sport_kind");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("sport_kind", "offers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Legal", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Geo.City", "City")
                        .WithMany("Legals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Permission", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Role", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Roles")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedRoles")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Legal");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedRolePermissions")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedRolePermissions")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.RoleStadium", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Role", "Role")
                        .WithMany("RoleStadiums")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("RoleStadiums")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedRoleStadiums")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedRoleStadiums")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Role");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Geo.City", "City")
                        .WithMany("Stadiums")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Stadiums")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Legal");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.User", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Users")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedUsers")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Legal");

                    b.Navigation("Role");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.City", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Geo.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.Region", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Geo.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Field", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Offers.Field", "ParentField")
                        .WithMany("ChildFields")
                        .HasForeignKey("ParentFieldId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("Fields")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedFields")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedFields")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("ParentField");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Inventory", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedInventories")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedInventories")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.LockerRoom", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("LockerRooms")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedLockerRooms")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedLockerRooms")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.OffersImage", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Offers.Field", "Field")
                        .WithMany("Images")
                        .HasForeignKey("FieldId");

                    b.HasOne("Unfield.Domain.Entities.Offers.Inventory", "Inventory")
                        .WithMany("Images")
                        .HasForeignKey("InventoryId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedOffersImages")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("Inventory");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.OffersSportKind", b =>
                {
                    b.HasOne("Unfield.Domain.Entities.Offers.Field", "Field")
                        .WithMany("SportKinds")
                        .HasForeignKey("FieldId");

                    b.HasOne("Unfield.Domain.Entities.Offers.Inventory", "Inventory")
                        .WithMany("SportKinds")
                        .HasForeignKey("InventoryId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Unfield.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("Inventory");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Legal", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Stadiums");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleStadiums");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("LockerRooms");

                    b.Navigation("RoleStadiums");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Accounts.User", b =>
                {
                    b.Navigation("CreatedFields");

                    b.Navigation("CreatedInventories");

                    b.Navigation("CreatedLockerRooms");

                    b.Navigation("CreatedOffersImages");

                    b.Navigation("CreatedRolePermissions");

                    b.Navigation("CreatedRoleStadiums");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedUsers");

                    b.Navigation("LastModifiedFields");

                    b.Navigation("LastModifiedInventories");

                    b.Navigation("LastModifiedLockerRooms");

                    b.Navigation("LastModifiedRolePermissions");

                    b.Navigation("LastModifiedRoleStadiums");

                    b.Navigation("LastModifiedRoles");

                    b.Navigation("LastModifiedUsers");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.City", b =>
                {
                    b.Navigation("Legals");

                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Geo.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Field", b =>
                {
                    b.Navigation("ChildFields");

                    b.Navigation("Images");

                    b.Navigation("SportKinds");
                });

            modelBuilder.Entity("Unfield.Domain.Entities.Offers.Inventory", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("SportKinds");
                });
#pragma warning restore 612, 618
        }
    }
}
