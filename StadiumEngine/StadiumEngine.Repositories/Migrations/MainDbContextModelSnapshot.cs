// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StadiumEngine.Repositories.Infrastructure.Contexts;

#nullable disable

namespace StadiumEngine.DataAccess.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Legal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HeadName")
                        .HasColumnType("text")
                        .HasColumnName("head_name");

                    b.Property<string>("Inn")
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.ToTable("legal", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_group_id");

                    b.Property<int>("Sort")
                        .HasColumnType("integer")
                        .HasColumnName("sort");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("permission", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Sort")
                        .HasColumnType("integer")
                        .HasColumnName("sort");

                    b.HasKey("Id");

                    b.ToTable("permission_group", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("role", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("role_permission", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LegalId");

                    b.ToTable("stadium", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("LegalId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("user", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.UserStadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("user_stadium", "accounts");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_code");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text")
                        .HasColumnName("cancel_reason");

                    b.Property<DateTime?>("CloseVersionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_version_date");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day");

                    b.Property<decimal>("FieldAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("field_amount");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<decimal>("HoursCount")
                        .HasColumnType("numeric")
                        .HasColumnName("hours_count");

                    b.Property<decimal>("InventoryAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("inventory_amount");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsLastVersion")
                        .HasColumnType("boolean")
                        .HasColumnName("is_last_version");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekly");

                    b.Property<DateTime?>("IsWeeklyStoppedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_weekly_stopped_date");

                    b.Property<decimal?>("ManualDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("manual_discount");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("booking_number");

                    b.Property<decimal?>("PromoDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("promo_discount");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<decimal>("StartHour")
                        .HasColumnType("numeric")
                        .HasColumnName("start_hour");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer")
                        .HasColumnName("tariff_id");

                    b.Property<decimal>("TotalAmountAfterDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount_after_discount");

                    b.Property<decimal>("TotalAmountBeforeDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount_before_discount");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<decimal>("EndHour")
                        .HasColumnType("numeric")
                        .HasColumnName("end_hour");

                    b.Property<decimal>("StartHour")
                        .HasColumnType("numeric")
                        .HasColumnName("start_hour");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_cost", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_customer", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_inventory", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingLockerRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end");

                    b.Property<int>("LockerRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("locker_room_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("LockerRoomId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_locker_room", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingPromo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_promo", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("booking_token", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingWeeklyExcludeDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("booking_weekly_exclude_day", "bookings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("customer", "customers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("city", "geo");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("country", "geo");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("region", "geo");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer")
                        .HasColumnName("message_type");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("ui_message", "notifications");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessageLastRead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("ui_message_id");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserId");

                    b.ToTable("ui_message_last_read", "notifications");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessageText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("ui_message_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ui_message_text", "notifications");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("CoveringType")
                        .HasColumnType("smallint")
                        .HasColumnName("covering_type");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_field_id");

                    b.Property<int?>("PriceGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("price_group_id");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("ParentFieldId");

                    b.HasIndex("PriceGroupId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("field", "offers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("inventory", "offers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.LockerRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("locker_room", "offers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.OffersImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int?>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_value");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("image", "offers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.OffersSportKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int?>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<byte>("SportKind")
                        .HasColumnType("smallint")
                        .HasColumnName("sport_kind");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("sport_kind", "offers");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.DayInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("End")
                        .HasColumnType("text")
                        .HasColumnName("end");

                    b.Property<string>("Start")
                        .HasColumnType("text")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.ToTable("day_interval", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_obsolete");

                    b.Property<int>("TariffDayIntervalId")
                        .HasColumnType("integer")
                        .HasColumnName("tariff_day_interval_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TariffDayIntervalId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("price", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.PriceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("price_group", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer")
                        .HasColumnName("tariff_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("promo_code", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean")
                        .HasColumnName("friday");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean")
                        .HasColumnName("monday");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean")
                        .HasColumnName("saturday");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean")
                        .HasColumnName("sunday");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean")
                        .HasColumnName("thursday");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean")
                        .HasColumnName("tuesday");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean")
                        .HasColumnName("wednesday");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("tariff", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.TariffDayInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("DayIntervalId")
                        .HasColumnType("integer")
                        .HasColumnName("day_interval_id");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer")
                        .HasColumnName("tariff_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("DayIntervalId");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("tariff_day_interval", "rates");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.Break", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("EndHour")
                        .HasColumnType("numeric")
                        .HasColumnName("end_hour");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<decimal>("StartHour")
                        .HasColumnType("numeric")
                        .HasColumnName("start_hour");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("break", "settings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.BreakField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakId")
                        .HasColumnType("integer")
                        .HasColumnName("break_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_created_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("BreakId");

                    b.HasIndex("FieldId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("break_field", "settings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.MainSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CloseTime")
                        .HasColumnType("integer")
                        .HasColumnName("close_time");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OpenTime")
                        .HasColumnType("integer")
                        .HasColumnName("open_time");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("UserModifiedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_modified_id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId")
                        .IsUnique();

                    b.HasIndex("UserModifiedId");

                    b.ToTable("main_settings", "settings");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Legal", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Geo.City", "City")
                        .WithMany("Legals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Permission", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Role", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Roles")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedRoles")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Legal");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedRolePermissions")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedRolePermissions")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Geo.City", "City")
                        .WithMany("Stadiums")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Stadiums")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Legal");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.User", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Legal", "Legal")
                        .WithMany("Users")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedUsers")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Legal");

                    b.Navigation("Role");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.UserStadium", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("UserStadiums")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedUserStadiums")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "User")
                        .WithMany("UserStadiums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedUserStadiums")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("User");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.Booking", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "Field")
                        .WithMany("Bookings")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Rates.Tariff", "Tariff")
                        .WithMany("Bookings")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookings")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookings")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("Tariff");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingCost", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("Costs")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingsCosts")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingCosts")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingCustomer", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithOne("Customer")
                        .HasForeignKey("StadiumEngine.Domain.Entities.Bookings.BookingCustomer", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingsCustomers")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingsCustomers")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingInventory", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("Inventories")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Inventory", "Inventory")
                        .WithMany("BookingInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingInventories")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingInventories")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("Inventory");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingLockerRoom", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithOne("BookingLockerRoom")
                        .HasForeignKey("StadiumEngine.Domain.Entities.Bookings.BookingLockerRoom", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Offers.LockerRoom", "LockerRoom")
                        .WithMany("BookingLockerRooms")
                        .HasForeignKey("LockerRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingLockerRooms")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingLockerRooms")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("LockerRoom");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingPromo", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithOne("Promo")
                        .HasForeignKey("StadiumEngine.Domain.Entities.Bookings.BookingPromo", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingsPromos")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingsPromos")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingToken", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("Tokens")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.BookingWeeklyExcludeDay", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("WeeklyExcludeDays")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBookingsWeeklyExcludeDays")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBookingsWeeklyExcludeDays")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Booking");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.City", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Geo.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.Region", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Geo.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessage", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("UIMessages")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessageLastRead", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Notifications.UIMessage", "Message")
                        .WithMany("UIMessageLastReads")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("UIMessageLastReads")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "User")
                        .WithMany("UIMessageLastReads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Stadium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessageText", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Notifications.UIMessage", "Message")
                        .WithMany("Texts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Field", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "ParentField")
                        .WithMany("ChildFields")
                        .HasForeignKey("ParentFieldId");

                    b.HasOne("StadiumEngine.Domain.Entities.Rates.PriceGroup", "PriceGroup")
                        .WithMany("Fields")
                        .HasForeignKey("PriceGroupId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("Fields")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedFields")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedFields")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("ParentField");

                    b.Navigation("PriceGroup");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Inventory", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("Inventories")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedInventories")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedInventories")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.LockerRoom", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("LockerRooms")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedLockerRooms")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedLockerRooms")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.OffersImage", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "Field")
                        .WithMany("Images")
                        .HasForeignKey("FieldId");

                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Inventory", "Inventory")
                        .WithMany("Images")
                        .HasForeignKey("InventoryId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedOffersImages")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("Inventory");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.OffersSportKind", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "Field")
                        .WithMany("SportKinds")
                        .HasForeignKey("FieldId");

                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Inventory", "Inventory")
                        .WithMany("SportKinds")
                        .HasForeignKey("InventoryId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedOffersSportKinds")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("Inventory");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.Price", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "Field")
                        .WithMany("Prices")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Rates.TariffDayInterval", "TariffDayInterval")
                        .WithMany("Prices")
                        .HasForeignKey("TariffDayIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedPrices")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedPrices")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Field");

                    b.Navigation("TariffDayInterval");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.PriceGroup", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("PriceGroups")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedPriceGroups")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedPriceGroups")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.PromoCode", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Rates.Tariff", "Tariff")
                        .WithMany("PromoCodes")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedPromoCodes")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedPromoCodes")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Tariff");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.Tariff", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("Tariffs")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedTariffs")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedTariffs")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.TariffDayInterval", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Rates.DayInterval", "DayInterval")
                        .WithMany("TariffDayIntervals")
                        .HasForeignKey("DayIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Rates.Tariff", "Tariff")
                        .WithMany("TariffDayIntervals")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedTariffDayIntervals")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedTariffDayIntervals")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("DayInterval");

                    b.Navigation("Tariff");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.Break", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithMany("Breaks")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBreaks")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBreaks")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.BreakField", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Settings.Break", "Break")
                        .WithMany("BreakFields")
                        .HasForeignKey("BreakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Offers.Field", "Field")
                        .WithMany("BreakFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserCreated")
                        .WithMany("CreatedBreakFields")
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedBreakFields")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Break");

                    b.Navigation("Field");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.MainSettings", b =>
                {
                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.Stadium", "Stadium")
                        .WithOne("MainSettings")
                        .HasForeignKey("StadiumEngine.Domain.Entities.Settings.MainSettings", "StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StadiumEngine.Domain.Entities.Accounts.User", "UserModified")
                        .WithMany("LastModifiedMainSettings")
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Stadium");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Legal", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Stadiums");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.Stadium", b =>
                {
                    b.Navigation("Breaks");

                    b.Navigation("Fields");

                    b.Navigation("Inventories");

                    b.Navigation("LockerRooms");

                    b.Navigation("MainSettings");

                    b.Navigation("PriceGroups");

                    b.Navigation("Tariffs");

                    b.Navigation("UIMessageLastReads");

                    b.Navigation("UIMessages");

                    b.Navigation("UserStadiums");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Accounts.User", b =>
                {
                    b.Navigation("CreatedBookingInventories");

                    b.Navigation("CreatedBookingLockerRooms");

                    b.Navigation("CreatedBookings");

                    b.Navigation("CreatedBookingsCosts");

                    b.Navigation("CreatedBookingsCustomers");

                    b.Navigation("CreatedBookingsPromos");

                    b.Navigation("CreatedBookingsWeeklyExcludeDays");

                    b.Navigation("CreatedBreakFields");

                    b.Navigation("CreatedBreaks");

                    b.Navigation("CreatedFields");

                    b.Navigation("CreatedInventories");

                    b.Navigation("CreatedLockerRooms");

                    b.Navigation("CreatedOffersImages");

                    b.Navigation("CreatedOffersSportKinds");

                    b.Navigation("CreatedPriceGroups");

                    b.Navigation("CreatedPrices");

                    b.Navigation("CreatedPromoCodes");

                    b.Navigation("CreatedRolePermissions");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedTariffDayIntervals");

                    b.Navigation("CreatedTariffs");

                    b.Navigation("CreatedUserStadiums");

                    b.Navigation("CreatedUsers");

                    b.Navigation("LastModifiedBookingCosts");

                    b.Navigation("LastModifiedBookingInventories");

                    b.Navigation("LastModifiedBookingLockerRooms");

                    b.Navigation("LastModifiedBookings");

                    b.Navigation("LastModifiedBookingsCustomers");

                    b.Navigation("LastModifiedBookingsPromos");

                    b.Navigation("LastModifiedBookingsWeeklyExcludeDays");

                    b.Navigation("LastModifiedBreakFields");

                    b.Navigation("LastModifiedBreaks");

                    b.Navigation("LastModifiedFields");

                    b.Navigation("LastModifiedInventories");

                    b.Navigation("LastModifiedLockerRooms");

                    b.Navigation("LastModifiedMainSettings");

                    b.Navigation("LastModifiedPriceGroups");

                    b.Navigation("LastModifiedPrices");

                    b.Navigation("LastModifiedPromoCodes");

                    b.Navigation("LastModifiedRolePermissions");

                    b.Navigation("LastModifiedRoles");

                    b.Navigation("LastModifiedTariffDayIntervals");

                    b.Navigation("LastModifiedTariffs");

                    b.Navigation("LastModifiedUserStadiums");

                    b.Navigation("LastModifiedUsers");

                    b.Navigation("UIMessageLastReads");

                    b.Navigation("UserStadiums");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Navigation("BookingLockerRoom");

                    b.Navigation("Costs");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("Promo");

                    b.Navigation("Tokens");

                    b.Navigation("WeeklyExcludeDays");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.City", b =>
                {
                    b.Navigation("Legals");

                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Geo.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Notifications.UIMessage", b =>
                {
                    b.Navigation("Texts");

                    b.Navigation("UIMessageLastReads");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Field", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("BreakFields");

                    b.Navigation("ChildFields");

                    b.Navigation("Images");

                    b.Navigation("Prices");

                    b.Navigation("SportKinds");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.Inventory", b =>
                {
                    b.Navigation("BookingInventories");

                    b.Navigation("Images");

                    b.Navigation("SportKinds");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Offers.LockerRoom", b =>
                {
                    b.Navigation("BookingLockerRooms");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.DayInterval", b =>
                {
                    b.Navigation("TariffDayIntervals");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.PriceGroup", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.Tariff", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PromoCodes");

                    b.Navigation("TariffDayIntervals");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Rates.TariffDayInterval", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("StadiumEngine.Domain.Entities.Settings.Break", b =>
                {
                    b.Navigation("BreakFields");
                });
#pragma warning restore 612, 618
        }
    }
}
